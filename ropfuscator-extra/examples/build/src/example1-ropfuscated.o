; ModuleID = '/tmp/llvm-7.0.0.src/lib/Target/X86/ropfuscator-extra/examples/src/example1.c'
source_filename = "/tmp/llvm-7.0.0.src/lib/Target/X86/ropfuscator-extra/examples/src/example1.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

$__llvm_profile_filename = comdat any

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@__llvm_coverage_mapping = internal constant { { i32, i32, i32, i32 }, [2 x <{ i64, i32, i64 }>], [120 x i8] } { { i32, i32, i32, i32 } { i32 2, i32 78, i32 42, i32 2 }, [2 x <{ i64, i32, i64 }>] [<{ i64, i32, i64 }> <{ i64 -1973632818483600867, i32 30, i64 640088 }>, <{ i64, i32, i64 }> <{ i64 -2624081020897602054, i32 9, i64 0 }>], [120 x i8] c"\01L/tmp/llvm-7.0.0.src/lib/Target/X86/ropfuscator-extra/examples/src/example1.c\01\00\01\01\05\04\01\03\10\07\02\03\02\0A\00\10\05\00\11\00\92\80\80\80\08\05\00\12\03\04\01\00\00\01\01\0C\0C\04\02\00\00\00" }, section "__llvm_covmap", align 8
@__profc_sum = private global [2 x i64] zeroinitializer, section "__llvm_prf_cnts", align 8
@__profd_sum = private global { i64, i64, i64*, i8*, i8*, i32, [2 x i16] } { i64 -1973632818483600867, i64 640088, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @__profc_sum, i32 0, i32 0), i8* bitcast (i32 (i32)* @sum to i8*), i8* null, i32 2, [2 x i16] zeroinitializer }, section "__llvm_prf_data", align 8
@__profc_main = private global [1 x i64] zeroinitializer, section "__llvm_prf_cnts", align 8
@__profd_main = private global { i64, i64, i64*, i8*, i8*, i32, [2 x i16] } { i64 -2624081020897602054, i64 0, i64* getelementptr inbounds ([1 x i64], [1 x i64]* @__profc_main, i32 0, i32 0), i8* bitcast (i32 ()* @main to i8*), i8* null, i32 1, [2 x i16] zeroinitializer }, section "__llvm_prf_data", align 8
@__llvm_prf_nm = private constant [18 x i8] c"\08\10x\DA+.\CDe\CCM\CC\CC\03\00\0D}\02\FC", section "__llvm_prf_names"
@llvm.used = appending global [4 x i8*] [i8* bitcast ({ { i32, i32, i32, i32 }, [2 x <{ i64, i32, i64 }>], [120 x i8] }* @__llvm_coverage_mapping to i8*), i8* bitcast ({ i64, i64, i64*, i8*, i8*, i32, [2 x i16] }* @__profd_sum to i8*), i8* bitcast ({ i64, i64, i64*, i8*, i8*, i32, [2 x i16] }* @__profd_main to i8*), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__llvm_prf_nm, i32 0, i32 0)], section "llvm.metadata"
@__llvm_profile_filename = constant [30 x i8] c"example1-ropfuscated.profdata\00", comdat

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @sum(i32) #0 !dbg !7 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !11, metadata !DIExpression()), !dbg !12
  %4 = load i64, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @__profc_sum, i64 0, i64 0), !dbg !13
  %5 = add i64 %4, 1, !dbg !13
  store i64 %5, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @__profc_sum, i64 0, i64 0), !dbg !13
  call void @llvm.dbg.declare(metadata i32* %3, metadata !14, metadata !DIExpression()), !dbg !15
  %6 = load i32, i32* %2, align 4, !dbg !16
  %7 = add nsw i32 %6, 12, !dbg !17
  store i32 %7, i32* %3, align 4, !dbg !15
  br label %8, !dbg !18

; <label>:8:                                      ; preds = %11, %1
  %9 = load i32, i32* %3, align 4, !dbg !19
  %10 = icmp sgt i32 %9, 46, !dbg !20
  br i1 %10, label %11, label %18, !dbg !18

; <label>:11:                                     ; preds = %8
  %12 = load i64, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @__profc_sum, i64 0, i64 1), !dbg !18
  %13 = add i64 %12, 1, !dbg !18
  store i64 %13, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @__profc_sum, i64 0, i64 1), !dbg !18
  %14 = load i32, i32* %3, align 4, !dbg !21
  %15 = sub nsw i32 %14, 2, !dbg !23
  store i32 %15, i32* %3, align 4, !dbg !24
  %16 = load i32, i32* %3, align 4, !dbg !25
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %16), !dbg !26
  br label %8, !dbg !18, !llvm.loop !27

; <label>:18:                                     ; preds = %8
  %19 = load i32, i32* %3, align 4, !dbg !29
  ret i32 %19, !dbg !30
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare void @llvm.instrprof.increment(i8*, i64, i32, i32) #2

declare dso_local i32 @printf(i8*, ...) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !31 {
  %1 = alloca i32, align 4
  %2 = load i64, i64* getelementptr inbounds ([1 x i64], [1 x i64]* @__profc_main, i64 0, i64 0), !dbg !34
  %3 = add i64 %2, 1, !dbg !34
  store i64 %3, i64* getelementptr inbounds ([1 x i64], [1 x i64]* @__profc_main, i64 0, i64 0), !dbg !34
  call void @llvm.dbg.declare(metadata i32* %1, metadata !35, metadata !DIExpression()), !dbg !36
  %4 = call i32 @sum(i32 40), !dbg !37
  store i32 %4, i32* %1, align 4, !dbg !36
  %5 = load i32, i32* %1, align 4, !dbg !38
  %6 = add nsw i32 %5, 256, !dbg !38
  store i32 %6, i32* %1, align 4, !dbg !38
  %7 = load i32, i32* %1, align 4, !dbg !39
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %7), !dbg !40
  ret i32 0, !dbg !41
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5}
!llvm.ident = !{!6}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 7.0.1 (tags/RELEASE_701/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "/tmp/llvm-7.0.0.src/lib/Target/X86/ropfuscator-extra/examples/src/example1.c", directory: "/tmp/llvm-7.0.0.src/lib/Target/X86/ropfuscator-extra/examples/build/src")
!2 = !{}
!3 = !{i32 2, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{i32 1, !"wchar_size", i32 4}
!6 = !{!"clang version 7.0.1 (tags/RELEASE_701/final)"}
!7 = distinct !DISubprogram(name: "sum", scope: !1, file: !1, line: 3, type: !8, isLocal: false, isDefinition: true, scopeLine: 3, flags: DIFlagPrototyped, isOptimized: false, unit: !0, retainedNodes: !2)
!8 = !DISubroutineType(types: !9)
!9 = !{!10, !10}
!10 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!11 = !DILocalVariable(name: "a", arg: 1, scope: !7, file: !1, line: 3, type: !10)
!12 = !DILocation(line: 3, column: 13, scope: !7)
!13 = !DILocation(line: 3, column: 16, scope: !7)
!14 = !DILocalVariable(name: "b", scope: !7, file: !1, line: 4, type: !10)
!15 = !DILocation(line: 4, column: 7, scope: !7)
!16 = !DILocation(line: 4, column: 11, scope: !7)
!17 = !DILocation(line: 4, column: 13, scope: !7)
!18 = !DILocation(line: 5, column: 3, scope: !7)
!19 = !DILocation(line: 5, column: 10, scope: !7)
!20 = !DILocation(line: 5, column: 12, scope: !7)
!21 = !DILocation(line: 6, column: 9, scope: !22)
!22 = distinct !DILexicalBlock(scope: !7, file: !1, line: 5, column: 18)
!23 = !DILocation(line: 6, column: 11, scope: !22)
!24 = !DILocation(line: 6, column: 7, scope: !22)
!25 = !DILocation(line: 7, column: 20, scope: !22)
!26 = !DILocation(line: 7, column: 5, scope: !22)
!27 = distinct !{!27, !18, !28}
!28 = !DILocation(line: 8, column: 3, scope: !7)
!29 = !DILocation(line: 9, column: 10, scope: !7)
!30 = !DILocation(line: 9, column: 3, scope: !7)
!31 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 12, type: !32, isLocal: false, isDefinition: true, scopeLine: 12, isOptimized: false, unit: !0, retainedNodes: !2)
!32 = !DISubroutineType(types: !33)
!33 = !{!10}
!34 = !DILocation(line: 12, column: 12, scope: !31)
!35 = !DILocalVariable(name: "a", scope: !31, file: !1, line: 13, type: !10)
!36 = !DILocation(line: 13, column: 7, scope: !31)
!37 = !DILocation(line: 13, column: 11, scope: !31)
!38 = !DILocation(line: 14, column: 5, scope: !31)
!39 = !DILocation(line: 15, column: 18, scope: !31)
!40 = !DILocation(line: 15, column: 3, scope: !31)
!41 = !DILocation(line: 16, column: 1, scope: !31)
